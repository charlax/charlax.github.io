<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dein.fr - code</title><link href="http://www.dein.fr/" rel="alternate"></link><link href="http://www.dein.fr/feeds/code.atom.xml" rel="self"></link><id>http://www.dein.fr/</id><updated>2021-01-28T10:27:00+01:00</updated><subtitle>Charles-Axel Dein's personal website</subtitle><entry><title>A Python project checklist</title><link href="http://www.dein.fr/2021-01-28-python-project-checklist.html" rel="alternate"></link><published>2021-01-28T10:27:00+01:00</published><updated>2021-01-28T10:27:00+01:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2021-01-28:/2021-01-28-python-project-checklist.html</id><summary type="html">&lt;p&gt;All the best practices for setting up a new app in Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;When building a new project, it's a smart move to be very strict right from the
start. It is much harder to add more linting/typing checks once you have 1000+
lines of code.&lt;/p&gt;
&lt;p&gt;That's why I'm providing an opinionated list of libraries for your new Python
project. I might write a more in-depth article on the best practices when
building a web app with Python. For now, this is mostly a checklist with some
obvious recommendations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why not a template repo instead of a checklist?&lt;/strong&gt; Template repositories (e.g.
built with &lt;a href="https://github.com/cookiecutter/cookiecutter"&gt;cookiecutter&lt;/a&gt;) go
quickly out of date and discourage learning about the ins and outs of all those
best practices. They might make sense for your organization, but they're not
the point of this article.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Development tasks: &lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Typechecking: &lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dependency and virtualenv management: &lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linting: &lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code autoformatting: &lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; and &lt;a href="https://pycqa.github.io/isort/"&gt;isort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tests: &lt;a href="https://docs.pytest.org/en/stable/"&gt;pytest&lt;/a&gt; with plugins such as
    &lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt;, &lt;a href="https://pytest-factoryboy.readthedocs.io/en/latest/"&gt;pytest-factoryboy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docstring: &lt;a href="http://www.pydocstyle.org/en/stable/"&gt;pydocstyle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logging: &lt;a href="https://www.structlog.org/en/stable/"&gt;structlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configuration: &lt;a href="https://pydantic-docs.helpmanual.io/usage/settings/"&gt;Pydantic BaseSettings&lt;/a&gt; with &lt;a href="https://pypi.org/project/python-dotenv/"&gt;dotenv support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Error reporting: &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Documentation: &lt;a href="https://docusaurus.io/"&gt;Docusaurus&lt;/a&gt; or &lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Profiling and performance: &lt;a href="https://docs.python.org/3/library/profile.html"&gt;profile&lt;/a&gt;, &lt;a href="https://github.com/joerick/pyinstrument"&gt;pyinstrument&lt;/a&gt;, &lt;a href="https://github.com/inconshreveable/sqltap"&gt;sqltap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data validation: &lt;a href="https://pydantic-docs.helpmanual.io/usage/models/"&gt;Pydantic Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DB ORM: &lt;a href="https://www.sqlalchemy.org/docs/latest/"&gt;sqlalchemy&lt;/a&gt; and &lt;a href="https://alembic.sqlalchemy.org/"&gt;alembic&lt;/a&gt; for migrations&lt;/li&gt;
&lt;li&gt;Web framework: &lt;a href="https://fastapi.tiangolo.com/"&gt;fastapi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FP utilities: &lt;a href="https://toolz.readthedocs.io/"&gt;toolz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CLI framework: &lt;a href="https://typer.tiangolo.com/"&gt;typer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not detailed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Running development tasks: Makefile&lt;/h2&gt;
&lt;p&gt;Makefiles are well understood, work almost everywhere, and shorten the ramp-up
time for fellow developers who might not have much experience with Python.&lt;/p&gt;
&lt;p&gt;Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;SHELL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; bash
&lt;span class="nf"&gt;.ONESHELL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nv"&gt;.SHELLFLAGS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; -eu -o pipefail -c
&lt;span class="nf"&gt;.DELETE_ON_ERROR&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nv"&gt;MAKEFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; --warn-undefined-variables
&lt;span class="nv"&gt;MAKEFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; --no-builtin-rules

&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;# Install the app locally&lt;/span&gt;
    poetry install
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;

&lt;span class="nf"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typecheck&lt;/span&gt; &lt;span class="n"&gt;lint&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="c"&gt;## Run all checks (test, lint, typecheck)&lt;/span&gt;
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt;

&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;## Run tests&lt;/span&gt;
    poetry run pytest .
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

&lt;span class="nf"&gt;lint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;## Run linting&lt;/span&gt;
    poetry run black --check .
    poetry run isort -c .
    poetry run flake8 .
    poetry run pydocstyle .
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lint&lt;/span&gt;

&lt;span class="nf"&gt;lint-fix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;## Run autoformatters&lt;/span&gt;
    poetry run black .
    poetry run isort .
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lint&lt;/span&gt;-&lt;span class="n"&gt;fix&lt;/span&gt;

&lt;span class="nf"&gt;typecheck&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;## Run typechecking&lt;/span&gt;
    poetry run mypy --show-error-codes --pretty .
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typecheck&lt;/span&gt;

&lt;span class="nv"&gt;.DEFAULT_GOAL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Makefile&lt;/span&gt;
    @grep -E &lt;span class="s1"&gt;&amp;#39;(^[a-zA-Z_-]+:.*?##.*$$)|(^##)&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKEFILE_LIST&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;BEGIN {FS = &amp;quot;:.*?## &amp;quot;}; {printf &amp;quot;\033[32m%-30s\033[0m %s\n&amp;quot;, $$1, $$2}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/\[32m##/[33m/&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a great article about Makefile: &lt;a href="https://tech.davis-hansson.com/p/make/"&gt;Your Makefiles are wrong&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Typechecking: mypy&lt;/h2&gt;
&lt;p&gt;Type annotations in Python libraries are not yet pervasive, but getting better
every day.&lt;/p&gt;
&lt;p&gt;Supported by Python's founder, Guido van Rossum, &lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt;
is the de facto standard. The &lt;a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html"&gt;cheat sheet&lt;/a&gt;
is a very helpful resource.&lt;/p&gt;
&lt;p&gt;You can configure mypy inside &lt;code&gt;setup.cfg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[mypy]&lt;/span&gt;
&lt;span class="na"&gt;strict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# I prefer to be explicit about ignoring packages which do not yet have types:&lt;/span&gt;
&lt;span class="k"&gt;[mypy-psycopg2.*]&lt;/span&gt;
&lt;span class="na"&gt;ignore_missing_imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Dependency and virtualenv management: poetry&lt;/h2&gt;
&lt;p&gt;Unfortunately because of the way &lt;code&gt;pip&lt;/code&gt; installs dependencies, you have to deal
with virtualenv in most cases (although &lt;a href="https://pdm.fming.dev/"&gt;things might change rapidly with pdm&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Nowadays I'd recommend using &lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt;. It is not
yet absolutely perfect, but it provides a very elegant CLI API.&lt;/p&gt;
&lt;p&gt;It's super easy to start a project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;poetry new service-name
&lt;span class="nb"&gt;cd&lt;/span&gt; service-name
&lt;span class="nv"&gt;$EDITOR&lt;/span&gt; pyproject.toml
rm -Rf tests
mv README.rst README.md

poetry add sqlalchemy  &lt;span class="c1"&gt;# for instance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then either go into a virtualenv-enabled shell with &lt;code&gt;poetry shell&lt;/code&gt; or prefix
your commands with &lt;code&gt;poetry run ...&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Linting: flake8&lt;/h2&gt;
&lt;p&gt;There are two main linters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pylint.org/"&gt;pylint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I usually rely mostly on flake8 because it has fewer false positives. While
pylint is super configurable, it includes too many checks to my taste.&lt;/p&gt;
&lt;p&gt;I use the following configuration (in &lt;code&gt;setup.cfg&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[flake8]&lt;/span&gt;
&lt;span class="na"&gt;max-line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;99&lt;/span&gt;
&lt;span class="na"&gt;extend-ignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    # See https://github.com/PyCQA/pycodestyle/issues/373&lt;/span&gt;
&lt;span class="s"&gt;    E203,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Code autoformatting: black and isort&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; autoformats your code so that you don't
have to think about it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pycqa.github.io/isort/"&gt;isort&lt;/a&gt; is a nice addition to black, it will
sort your imports to comply with &lt;a href="https://www.python.org/dev/peps/pep-0008/#imports"&gt;PEP 8&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort alphabetically&lt;/li&gt;
&lt;li&gt;Group into standard imports, third-party imports, app imports&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's my isort config to comply with flake8 and black (in
&lt;code&gt;pyproject.toml&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.isort]&lt;/span&gt;
&lt;span class="n"&gt;multi_line_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;include_trailing_comma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;force_grid_wrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;use_parentheses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;ensure_newline_before_comments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;line_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Test: pytest with coverage&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/stable/"&gt;pytest&lt;/a&gt; has a lot of magical features but
it makes writing tests so efficient. The fixture system is brilliant and
super powerful. Using plain &lt;code&gt;assert&lt;/code&gt; instead of having to learn an &lt;code&gt;assertEqual&lt;/code&gt;
metalanguage makes your life more meaningful.&lt;/p&gt;
&lt;p&gt;Here's the config I use (in &lt;code&gt;pyproject.toml&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.pytest.ini_options]&lt;/span&gt;
&lt;span class="c1"&gt;# Personal preference: I am too used to native traceback&lt;/span&gt;
&lt;span class="n"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--tb=short&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[tool.coverage.report]&lt;/span&gt;
&lt;span class="n"&gt;exclude_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;pragma: no cover&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;def __repr__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;if __name__ == .__main__.:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;nocov&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;if TYPE_CHECKING:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;[tool.coverage.run]&lt;/span&gt;
&lt;span class="c1"&gt;# Activating branch coverage is super important&lt;/span&gt;
&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;omit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="c1"&gt;# add your files to omit here&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I usually use the following plugins and lib:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pytest-factoryboy.readthedocs.io/en/latest/"&gt;pytest-factoryboy&lt;/a&gt; use
    factories to create your fixture. Super powerful, and avoids having a single
    file where all your reusable fixtures are defined a thousand times with
    different variations.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-mock/"&gt;pytest-mock&lt;/a&gt; makes it easier to
    work with &lt;code&gt;unittest.mock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt; provides coverage
    reports for your tests.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/uber/doubles"&gt;doubles&lt;/a&gt;: sadly not maintained anymore (but
    it still works!), it provides a much simpler and stricter mocking experience
    than &lt;code&gt;unittest.mock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://requests-mock.readthedocs.io/en/latest/"&gt;requests-mock&lt;/a&gt; to check
    integration with HTTP services called with &lt;a href="https://requests.readthedocs.io/en/master/"&gt;requests&lt;/a&gt;. It automatically integrates with pytest and provides a fixture named &lt;code&gt;requests_mock&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Checking docstring: pydocstyle&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.pydocstyle.org/en/stable/"&gt;pydocstyle&lt;/a&gt; enforces &lt;a href="https://www.python.org/dev/peps/pep-0257/"&gt;PEP
257&lt;/a&gt; for docstring styling.&lt;/p&gt;
&lt;p&gt;Here's my config (in &lt;code&gt;setup.cfg&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[pydocstyle]&lt;/span&gt;
&lt;span class="c1"&gt;# Do not require any docstring&lt;/span&gt;
&lt;span class="n"&gt;ignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D103&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D106&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D107&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D213&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D203&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Logging: structlog&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.structlog.org/en/stable/"&gt;structlog&lt;/a&gt; is a must-have for all your
logging needs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;structlog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_logger&lt;/span&gt;


&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;saying hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# instead of :&lt;/span&gt;
        &lt;span class="c1"&gt;# logger.info(&amp;quot;saying hello to %s&amp;quot;, name)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Structuring your logs has numerous advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Immediately parsable by automated tools (kibana, m/r jobs, etc.)&lt;/li&gt;
&lt;li&gt;Easier to write: you don't have to think about the order of your logging
    message&lt;/li&gt;
&lt;li&gt;Flexible: can be further manipulated since all log messages are dicts
    until they're displayed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create &lt;code&gt;yourapp.lib.log&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;structlog&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yourapp.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Can&amp;#39;t serialize &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event_dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Add version to log message.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;event_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git_commit_short&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;event_dict&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConsoleRenderer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsoleRenderer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Display shorter uuid&lt;/span&gt;
        &lt;span class="c1"&gt;# https://www.structlog.org/en/stable/_modules/structlog/dev.html#ConsoleRenderer&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Configure logging.&lt;/span&gt;

&lt;span class="sd"&gt;    console should be True for console (dev) environment.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# see https://stackoverflow.com/questions/37703609/using-python-logging-with-aws-lambda&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;removeHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;processors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;add_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_logger_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_log_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeStamper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M.%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackInfoRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_exc_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSONRenderer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# nocov&lt;/span&gt;
        &lt;span class="n"&gt;processors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_logger_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_log_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositionalArgumentsFormatter&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeStamper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M.%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackInfoRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_exc_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ConsoleRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;
        &lt;span class="n"&gt;wrapper_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BoundLogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;logger_factory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoggerFactory&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;cache_logger_on_first_use&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Configuration: Pydantic's BaseSettings&lt;/h2&gt;
&lt;p&gt;Like most people, I usually ended up having my own mechanism for handling
configuration. Thanks to the web framework fastapi, I've discovered that
&lt;a href="https://pydantic-docs.helpmanual.io/"&gt;pydantic&lt;/a&gt; provides a very handy
&lt;a href="https://pydantic-docs.helpmanual.io/usage/settings/"&gt;BaseSettings&lt;/a&gt; class that
relies on environment variable for its configuration. &lt;code&gt;BaseSettings&lt;/code&gt; provide
many things that would be annoying to implement from scratch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type hints&lt;/li&gt;
&lt;li&gt;Read from environment variables&lt;/li&gt;
&lt;li&gt;Validate configuration values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.env&lt;/code&gt; support with &lt;a href="https://pypi.org/project/python-dotenv/"&gt;python-dotenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Secrets support&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseSettings&lt;/span&gt;

&lt;span class="n"&gt;ENV_FILENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DOTENV&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MisconfiguredException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseSettings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Please use env_name ONLY for informational purpose (see docs)&lt;/span&gt;
    &lt;span class="n"&gt;env_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;git_commit_short&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unknown&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Activate this to get profiling - see documentation.&lt;/span&gt;
    &lt;span class="n"&gt;is_db_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;db_user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unconfigured&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db_password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unconfigured&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unconfigured&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db_port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5432&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db_host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;sentry_dsn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Get the config.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# We follow serverless&amp;#39;s dotenv plugin&amp;#39;s behavior here:&lt;/span&gt;
    &lt;span class="c1"&gt;# https://www.npmjs.com/package/serverless-dotenv-plugin&lt;/span&gt;

    &lt;span class="c1"&gt;# First load .env&lt;/span&gt;
    &lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dotenv_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENV_FILENAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Config file &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ENV_FILENAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; does not exist.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ENV_FILENAME&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.local&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Expected env filename like &amp;#39;.env.dev&amp;#39;, &amp;quot;&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;got override ending with .local instead: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ENV_FILENAME&lt;/span&gt;&lt;span class="si"&gt;!r}&lt;/span&gt;&lt;span class="s2"&gt;. &amp;quot;&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; Try with &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ENV_FILENAME&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;!r}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Then load .env.{env}&lt;/span&gt;
    &lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dotenv_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ENV_FILENAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Then load .env.{env}.local if it exists&lt;/span&gt;
    &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ENV_FILENAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.local&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;override&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dotenv_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;override&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you just have to run your commands  like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DOTENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.env.test poetry run pytest .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Error reporting: Sentry&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; is a service that provides exception
monitoring. Its SDK is very simple to integrate.&lt;/p&gt;
&lt;p&gt;Usually, I use the following pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.lib.log&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;configure_logger&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.lib.sentry&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;configure_sentry&lt;/span&gt;

&lt;span class="n"&gt;configure_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;configure_sentry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app.lib.sentry&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sentry_sdk&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;structlog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_logger&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure_sentry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# nocov&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sentry_dsn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;not configuring sentry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;sentry_sdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dsn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sentry_dsn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;traces_sample_rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git_commit_short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Documentation: Docusaurus&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; is another great choice
(especially if you want to get Python code auto-documentation), but at my
current company Gens de Confiance we use &lt;a href="https://docusaurus.io/"&gt;Docusaurus&lt;/a&gt;,
a powerful yet simple documentation management tool.&lt;/p&gt;
&lt;h2&gt;Domain models, data validation: Pydantic&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pydantic-docs.helpmanual.io/usage/models/"&gt;Pydantic Models&lt;/a&gt; is
a flexible way to create your domain model objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type hinting&lt;/li&gt;
&lt;li&gt;Validators&lt;/li&gt;
&lt;li&gt;Export to json-schema&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also use Python's standard lib
&lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclass&lt;/a&gt; together with
something like &lt;a href="https://marshmallow.readthedocs.io/en/stable/"&gt;marshmallow&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;ORM: sqlalchemy&lt;/h2&gt;
&lt;p&gt;If you need to interact with the DB,
&lt;a href="https://www.sqlalchemy.org/docs/latest/"&gt;sqlalchemy&lt;/a&gt; is a very safe choice. It
comes with loads of features and is the most used non-Django Python ORM, which
means that you'll find Stack Overflow solution for all your problems. Using
&lt;a href="https://alembic.sqlalchemy.org/"&gt;alembic&lt;/a&gt; for DB migrations is the next
logical move.&lt;/p&gt;
&lt;p&gt;Both libraries are written by the insanely productive &lt;a href="https://github.com/zzzeek"&gt;Mike
Bayer&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Web framework: fastapi?&lt;/h2&gt;
&lt;p&gt;You have a lot of excellent choices when it comes to Python web framework.
I usually prefer microframework and am currently developing with
&lt;a href="https://fastapi.tiangolo.com/"&gt;fastapi&lt;/a&gt;, which is a lot of fun to work with.&lt;/p&gt;
&lt;p&gt;I usually refrain from using any plugins that come with the framework, because
they are usually too coupled to the framework and the context of an HTTP
request. I might write an article about my preferred setup.&lt;/p&gt;
&lt;h2&gt;Utility functions for functional programming: toolz&lt;/h2&gt;
&lt;p&gt;While Python is not a strict functional programming language, it is possible to
write FP-styled code with it.  &lt;a href="https://toolz.readthedocs.io/"&gt;toolz&lt;/a&gt; is
a great companion and provides many utility functions that make writing code
easier. It has a curried-by-default namespace (&lt;code&gt;from toolz.curried import
take&lt;/code&gt;). Checkout its &lt;a href="https://toolz.readthedocs.io/en/latest/api.html"&gt;cheat
sheet&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;CLI framework: typer&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://typer.tiangolo.com/"&gt;typer&lt;/a&gt; (same author as fastapi and pydantic)
leverages type annotations to make it super easy to write powerful CLI scripts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Say hello.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;typer&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Performance profiling: pyinstrument and sqltap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/joerick/pyinstrument"&gt;pyinstrument&lt;/a&gt; is a recent Python
    profiler which can export to HTML.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/inconshreveable/sqltap"&gt;sqltap&lt;/a&gt; integrates with
    sqlalchemy to allow you to introspect SQL queries and also exports to HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some services (like Sentry) can also profile code thanks to their SDK.
Otherwise, you can also rely on the standard library module &lt;a href="https://docs.python.org/3/library/profile.html"&gt;profile&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Wishlist&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lots of inconsistencies for where to put configuration: &lt;code&gt;setup.cfg&lt;/code&gt;,
    &lt;code&gt;pyproject.toml&lt;/code&gt;, specific files, etc.&lt;/li&gt;
&lt;li&gt;The more complex the library, the more useful it would be to have type
    annotations and... the less probable it is to have those annotations.
    Libraries such as sqlalchemy (coming in 2.0) and toolz don't have official types for now.&lt;/li&gt;
&lt;li&gt;mypy encourages nominal subtyping (see &lt;a href="https://mypy.readthedocs.io/en/stable/faq.html#can-i-use-duck-typing-with-mypy"&gt;this FAQ&lt;/a&gt;) which is a bit sad because it discourages using simple dicts. Fortunately something like &lt;a href="https://www.python.org/dev/peps/pep-0589/"&gt;PEP 589 TypeDict&lt;/a&gt; will improve things.&lt;/li&gt;
&lt;li&gt;It would be so nice to avoid having to use virtualenv (even through
    something like poetry or pipenv). First-time Python developers get so
    confused about them (compared to Node's simpler &lt;code&gt;node_modules&lt;/code&gt; setup). I'm really looking forward to seeing &lt;a href="https://www.python.org/dev/peps/pep-0582/"&gt;PEP
    582&lt;/a&gt; deployed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Missing something?&lt;/h2&gt;
&lt;p&gt;Drop me an email at &lt;code&gt;charles at dein.fr&lt;/code&gt; if you think I'm missing something!&lt;/p&gt;
&lt;p&gt;For more resources related to Python, check out my repo
&lt;a href="https://github.com/charlax/python-education"&gt;charlax/python-education&lt;/a&gt;.&lt;/p&gt;</content><category term="code"></category></entry><entry><title>Test coverage only matters if it's at 100%</title><link href="http://www.dein.fr/2019-09-06-test-coverage-only-matters-if-at-100-percent.html" rel="alternate"></link><published>2019-09-06T16:26:13+02:00</published><updated>2019-09-06T16:26:13+02:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2019-09-06:/2019-09-06-test-coverage-only-matters-if-at-100-percent.html</id><summary type="html">&lt;p&gt;all lines of code should be covered by a test or explicitly excluded from test coverage.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: all lines of code should be covered by a test or &lt;em&gt;explicitly&lt;/em&gt;
excluded from test coverage.&lt;/p&gt;
&lt;p&gt;What's your test coverage? What do you consider a good test coverage
percentage?&lt;/p&gt;
&lt;p&gt;Those questions often get asked during engineering interviews.
It gives the interviewee a sense of how much the company cares about quality.
It's also a good question for the candidate because you can't have a cargo
cult answer. You need to argue. It gives useful insights into one's quality
mindset.&lt;/p&gt;
&lt;p&gt;I believe the only right value to track for a test coverage metric is 100% of
the &lt;em&gt;lines that should be covered&lt;/em&gt; (&lt;em&gt;not&lt;/em&gt; the lines that are written), which
ensures that the lines that you don't want to cover are explicit, and not
implicit.&lt;/p&gt;
&lt;p&gt;Please don't skim the articles as you'll find that the point I'm making is pretty common sense. If you still disagree have a look at the response
to common objections at the end.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I'm using Python for all the examples below, but the principles are
applicable regardless of the programming language.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Why you should measure test coverage&lt;/h2&gt;
&lt;p&gt;If you're not already monitoring test coverage, you should probably start now
(if you don't have tests, that's for another article). Some programming
languages have better support than others. Python has excellent support for it,
through &lt;code&gt;pytest&lt;/code&gt; and &lt;code&gt;pytest-cov&lt;/code&gt; (using &lt;code&gt;coverage&lt;/code&gt; under the hood).&lt;/p&gt;
&lt;h3&gt;Test all functionality&lt;/h3&gt;
&lt;p&gt;Test coverage allows you to check which lines of code are run while the tests
are executed. If some lines are missing coverage, it means you're not testing
("covering") the underlying behavior. You could introduce a bug, and no test
would fail, which is not desirable. Introducing a bug should ideally trigger a
test to fail.&lt;/p&gt;
&lt;p&gt;Let's see a contrived example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# let&amp;#39;s say a bug is hidden here&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_toast&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The test will pass, even though &lt;code&gt;toast("brioche")&lt;/code&gt; should fail. Adding
a test for this case will let you find the &lt;code&gt;ZeroDivisionError&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Ensure all tests are run&lt;/h3&gt;
&lt;p&gt;Another case for checking is that you want to make sure that your test actually
run. In this contrived example, the tests will pass, even though one of
those test does not do anything:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_identity&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_identity_noop&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# this is a contrived example, there shouldn&amp;#39;t be any &amp;#39;if&amp;#39; in tests&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you've agreed that you need test coverage, the question remains: what is the
right level of coverage? It is very costly to ensure that absolutely every line
of code is tested. Should it be 80%? 90%?&lt;/p&gt;
&lt;h2&gt;Why you should check for 100% coverage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;TOTAL&lt;/span&gt;                                      &lt;span class="mi"&gt;18435&lt;/span&gt;     &lt;span class="mi"&gt;16&lt;/span&gt;   &lt;span class="mi"&gt;1742&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;

&lt;span class="n"&gt;FAIL&lt;/span&gt; &lt;span class="n"&gt;Required&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;coverage&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;coverage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;100% is clear cut.&lt;/p&gt;
&lt;p&gt;Enforcing 100% coverage requires you to be explicit about the lines that don't
have to be covered ("explicit is better than implicit"). By including the &lt;code&gt;no
cover&lt;/code&gt; marker (or whatever your language/coverage lib supports) next to the
code that is excluded from coverage, you allow code reviewers to see your
coverage decisions, and challenge them.&lt;/p&gt;
&lt;p&gt;The problem with having a goal that is not 100% is that it leaves room for
interpretation and negotiation. If we're currently at 80% and I bring coverage
at 79.9% because I'm too lazy to test my code (or exclude it from coverage),
then can't we say that it's ok? Explicit markers in the code make the
discussion more factual and objective.&lt;/p&gt;
&lt;p&gt;The other problem with something different from 100% is that you might be
adding coverage in one area, and reducing it in another, without knowing it. It
might still lead to 80% coverage - but the reduction in coverage might have
appeared in a crucial area of your code.&lt;/p&gt;
&lt;h2&gt;Will 100% coverage prevent any bug from being introduced?&lt;/h2&gt;
&lt;p&gt;Of course not. Just because a line is run in a test does not mean it is 100%
correct. You might not be testing all variations. The test might assert the
wrong thing.&lt;/p&gt;
&lt;p&gt;Some lines of code should be tested twice to ensure they're correct. See this
contrived example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;croissant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# this line is covered&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_can_toast&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;can_toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All the lines are covered, but I'm not testing that you can't toast &lt;code&gt;"brioche"&lt;/code&gt;
and &lt;code&gt;"baguette"&lt;/code&gt;. Let's say this behavior is critical (toasting a croissant is
a crime!). Without another test, somebody could change the code like this, and
nothing would break.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# this line is still covered&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_can_toast&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;can_toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Therefore sometime you definitely should test the same line more than once,
testing the failure case and the success case. I'd strongly recommend this for
permission checking for instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_can_toast&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;can_toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_can_toast_cannot&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;can_toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;croissant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Is this realistic?&lt;/h3&gt;
&lt;p&gt;You don't need to cover 100% of the lines you write. Some are not worth
covering as you'll see in the examples below. However, you need to cover 100% of the
lines &lt;strong&gt;you want to be covered&lt;/strong&gt;. You need to be explicit about excluding lines
from coverage. Tools such as Python's &lt;code&gt;coverage&lt;/code&gt; allow you to specify which
line should be excluded from the coverage.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;pytest-cov&lt;/code&gt; you can achieve this pretty simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;PLUGGED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;PLUGGED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_toast&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this setup, test coverage will be at 100% even though we did not test the
case where the toaster is not plugged because it is too simple. Writing a test
for this "functionality" would not be worth it. Therefore we explicitly exclude
it from coverage. You should revisit this decision if it becomes more complex
and needs to be tested.&lt;/p&gt;
&lt;h2&gt;What can/should be excluded from coverage?&lt;/h2&gt;
&lt;p&gt;It depends on your codebase and your quality expectations. Also, as
for any rules, there are exceptions. Examples are writing using Python, but this
is not language-dependent.&lt;/p&gt;
&lt;h3&gt;Simple error handling&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover - the handling is too obvious&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;no bread provided&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Anything more complicated than that should probably be covered.&lt;/p&gt;
&lt;h3&gt;Proxy functions&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;external_lib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Toaster&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover - we&amp;#39;re just proxying&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Toaster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It also applies to thin wrappers you might have in front of your
dependencies.&lt;/p&gt;
&lt;h3&gt;Code as configuration&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover - no complexity there&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Simple early return/continue&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;breads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;breads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover - simple early continue&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the early return/continue is part of the logic, or leads to complicated side
effects, it should be tested.&lt;/p&gt;
&lt;h3&gt;Code that is too difficult to test (rare)&lt;/h3&gt;
&lt;p&gt;In rare cases, it is a perfectly fine decision to exclude some code from
coverage if the tests are too expensive to write (because of the required
setup, or the use of an external library, for instance). Again - this should
only be in rare cases, for instance when you're using an external library that
is not easy to mock. In most cases, if your code is complicated to test that
probably means it needs to be refactored - easy-to-test code is usually better
designed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;packagea&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;packageb&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover - too complicated to test&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expensive_function_that_needs_to_be_mocked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expensive_function_that_needs_to_be_mocked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# lots of code&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure that this code is easy to test manually, and that the code calling it
is well tested.&lt;/p&gt;
&lt;h3&gt;Debugging/manual test code&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEBUGGING&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover - debugging code&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;toasting &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;What should be covered&lt;/h2&gt;
&lt;p&gt;Here's a list of things that should be covered, ideally more than
once.&lt;/p&gt;
&lt;h3&gt;Branches&lt;/h3&gt;
&lt;p&gt;If your language supports it, make sure you test all branches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="c1"&gt;# 1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="c1"&gt;# 2&lt;/span&gt;
        &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;toasted_baguette&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;# 3&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt;                     &lt;span class="c1"&gt;# 4&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_toast_baguette&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;toasted_baguette&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You're technically at 100% code coverage, but the case where &lt;code&gt;bread&lt;/code&gt; is not
"baguette" and the &lt;code&gt;if&lt;/code&gt; is never evaluated to False: line 2 never jumps to line
4. If you activate branch coverage, it will be flagged as a partial branch, and
   coverage won't be at 100%. To fully test it, you'll need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="c1"&gt;# 1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="c1"&gt;# 2&lt;/span&gt;
        &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;toasted_baguette&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;# 3&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt;                     &lt;span class="c1"&gt;# 4&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_toast_baguette&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;baguette&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;toasted_baguette&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# 2 -&amp;gt; 3 -&amp;gt; 4&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_toast_other&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# 2 -&amp;gt; 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As shown in this example, this lets you test more functionality, thus reducing
the probability of bugs.&lt;/p&gt;
&lt;h3&gt;Security: permission check, input sanitization...&lt;/h3&gt;
&lt;p&gt;Anything that relates to security should be heavily tested, with all sorts of
inputs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="n"&gt;REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[a-z]+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;REGEX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Invalid bread variant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_toast_fail&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="c1"&gt;# note: you can use pytest&amp;#39;s parametrize feature here.&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;12&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@#*$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;script&amp;gt;window.alert(&amp;#39;hello world!&amp;#39;)&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;; DROP TABLE users;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Complex error handling&lt;/h3&gt;
&lt;p&gt;If error handling is sophisticated enough and can be considered a feature (e.g.
recovering gracefully from some error) - it needs to be covered.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;doubles&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;toaster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unplug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;toaster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_toast_fail&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toaster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unplug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toaster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;toaster&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;New functionality (even for proof-of-concept)&lt;/h3&gt;
&lt;p&gt;While it might be tempting to exclude new prototyping code from coverage, I
think it's a bad idea because that's one more thing to remember and track.
Moreover, once a feature is shipped, we usually move on to the next feature and
never clean up our tests. So, it's safer to get into the habit of covering all
new code.&lt;/p&gt;
&lt;h2&gt;How to get to 100%&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Start tracking and displaying the test coverage. Make it easy to find
   uncovered lines (for instance with an HTML report). Have an open discussion
   with your team.&lt;/li&gt;
&lt;li&gt;Ensure all new code is fully covered, and that coverage can only strictly
   increase. Some Github bots let you enforce this.&lt;/li&gt;
&lt;li&gt;Before writing new code, check the coverage of the existing functionality,
   and bring it to 100%. Try to structure your tests so that running a single
   test file (e.g. &lt;code&gt;test_toaster.py&lt;/code&gt;) will cover 100% of its associated code
   file (&lt;code&gt;toaster.py&lt;/code&gt;). It allows for quicker iterations.&lt;/li&gt;
&lt;li&gt;Once you're at 100%, use your preferred tool's configuration to fail the
   tests if coverage is not 100%.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Coverage&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="n"&gt;written&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="n"&gt;htmlcov&lt;/span&gt;

&lt;span class="n"&gt;Required&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;coverage&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;reached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;coverage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Answer to common objections&lt;/h2&gt;
&lt;h3&gt;100% test coverage does not mean you're testing everything right.&lt;/h3&gt;
&lt;p&gt;Absolutely - this point is explicitly stated in this article. I even give an
example situation showing how just checking the test coverage leads to missing
an important test.&lt;/p&gt;
&lt;p&gt;100% test coverage does not make your code invulnerable, and it should
evidently not be your only metric. This article is only about the test coverage
metric.&lt;/p&gt;
&lt;h3&gt;A test suite that covers 80% is pretty good&lt;/h3&gt;
&lt;p&gt;Absolutely. It is a good number and a good goal for any
codebase.&lt;/p&gt;
&lt;p&gt;However, what about that remaining 20 %? Why are they not tested? Will it be clear
in 2 months why they were not tested? In 6 months? In a year? While it may make
perfect sense not to test them, you should be explicit about that decision and
keep the reason in the code.&lt;/p&gt;
&lt;p&gt;If you don't keep the test coverage &lt;em&gt;metric&lt;/em&gt; at 100%, then you leave it up to the
code reviewer to challenge your test coverage assumption.&lt;/p&gt;
&lt;h3&gt;100% is a blanket rule that leaves no room for negotiation&lt;/h3&gt;
&lt;p&gt;Once again, the goal is not to cover 100% of the lines of code - it would be
almost impossible. Thanks to &lt;code&gt;no cover&lt;/code&gt; markers, you can still decide to
exclude code from coverage. It actually makes this negotiation explicit in the
code, as opposed to implicit during the code review phase coverage.&lt;/p&gt;
&lt;p&gt;Consider the example below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;toast&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's say you're fixing a bug in this code, and you find out that the &lt;code&gt;if&lt;/code&gt;
branch is not covered. You're left to wonder why. The developer did not have
enough time? They decided it was too trivial to need a test?&lt;/p&gt;
&lt;p&gt;With an explicit marker, the intent is clear and gives you insight with what is
considered appropriate coverage for &lt;em&gt;this&lt;/em&gt; codebase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;toast&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;brioche&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# pragma: no cover, trivial error case&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;It is not feasible in an old codebase&lt;/h3&gt;
&lt;p&gt;Right, that's probably the case. However, this is not different from proper
testing, monitoring, logging practices. Decide if it's important, then start
with something attainable that brings you closer to the goal, and iterate.&lt;/p&gt;
&lt;p&gt;Also, if it is not a desirable goal for the codebase, then for sure don't monitor
test coverage!&lt;/p&gt;
&lt;h3&gt;Enforcing 100% test coverage leads to bad tests&lt;/h3&gt;
&lt;p&gt;It bears repeating: this is not about testing 100% of the lines; this is about
keeping the code coverage metric at 100%. I am not sure how that would lead to
bad tests.&lt;/p&gt;
&lt;p&gt;Putting too much focus on one particular metric might lead to gaming behavior.
That does not mean that no metric you should be enforced. I believe that there
isn't enough material and training about what it takes to write good tests.
This is beneficial regardless of whether you enforce test coverage. Also, the
more you talk about test coverage, the more you iterate and learn about
what it takes to write good tests in your language and codebase.&lt;/p&gt;
&lt;p&gt;What's sure is that it is straightforward to write bad tests. It takes a lot of
skills, experience, and hygiene to write great, maintainable tests. That's a
topic for another article.&lt;/p&gt;
&lt;h3&gt;100% coverage only matters for languages without a type checker&lt;/h3&gt;
&lt;p&gt;No. Sure, a type checker might catch some classes of bugs that would require a
test in a language without type checking, but you still need to test
correctness (among others).&lt;/p&gt;
&lt;h3&gt;You're creating blind spots&lt;/h3&gt;
&lt;p&gt;Unless you're reviewing your test coverage report after every single commit,
leaving explicit markers in the code and keeping the metric at 100% is actually
a much safer practice.&lt;/p&gt;
&lt;p&gt;When working in code that has been excluded, you'll immediately see the &lt;code&gt;no
cover&lt;/code&gt; marker, perhaps with a comment explaining why the code is excluded. This lets you reconsider the coverage decision.&lt;/p&gt;
&lt;p&gt;Any regression in coverage will break the tests.&lt;/p&gt;
&lt;h3&gt;You should not exclude code from coverage because of setup cost&lt;/h3&gt;
&lt;p&gt;This article is not about end-to-end vs. unit testing. I have provided some
examples of code that I sometimes exclude from testing, but your mileage may
vary.&lt;/p&gt;
&lt;h2&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;09/07/2019: added answer to common objections&lt;/li&gt;
&lt;li&gt;09/06/2019: added summary, clarified that not testing complicated should only
  apply to extreme cases and a few other points.&lt;/li&gt;
&lt;/ul&gt;</content><category term="code"></category></entry><entry><title>The great microservices migration</title><link href="http://www.dein.fr/2017-10-19-the-great-microservices-migration.html" rel="alternate"></link><published>2017-10-19T13:38:56+02:00</published><updated>2017-10-19T13:38:56+02:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2017-10-19:/2017-10-19-the-great-microservices-migration.html</id><summary type="html">&lt;p&gt;How did Uber go from a 450,000 lines monolithic Python application to more than 1,000 microservices?&lt;/p&gt;</summary><content type="html">&lt;p&gt;How did Uber go from a 450,000 lines monolithic Python application to more than 1,000 microservices? This short presentation focuses on the technical aspects of this 5-year migration, and concludes with its cultural and management challenges.&lt;/p&gt;
&lt;p&gt;I did this talk at the &lt;a href="https://devfest.gdgnantes.com/"&gt;DevFest&lt;/a&gt; 2017 in Nantes, France.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/O25xbCq_LFU?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;script async class="speakerdeck-embed" data-id="61e701c03a7440b680367ef80c6c5ac5" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;Feel free to also checkout my &lt;a href="https://github.com/charlax/professional-programming"&gt;professional-programming repo on Github&lt;/a&gt; which compiles a list of useful resources for programmers.&lt;/p&gt;</content><category term="code"></category></entry><entry><title>10 principles for good code</title><link href="http://www.dein.fr/2015-10-01-10-principles-for-good-code.html" rel="alternate"></link><published>2015-10-01T22:31:45+02:00</published><updated>2015-10-01T22:31:45+02:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2015-10-01:/2015-10-01-10-principles-for-good-code.html</id><summary type="html">&lt;p&gt;Taking inspiration from Dieter Rams' ten principles for good design, here are the ten principles of good code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It’s always interesting to apply ideas, principles and notions from one field to another. Especially when those two fields are very different.&lt;/p&gt;
&lt;p&gt;For instance, software and product design look very different on the surface. While the former is supposedly about pure mathematical rationality, the latter is, at least apparently, about emotions, psychology i.e. about fathoming the messiness of the human mind and the physical world.&lt;/p&gt;
&lt;p&gt;Is that true? I don’t think so. Code is written primarily for human to read [1]. Code also usually fixes problems that are coming from the physical world, and thus inherits some of its irrationality.&lt;/p&gt;
&lt;p&gt;So, what happens if we apply one of the most regarded designers’ principles to code? Namely, how can Dieter Rams’ &lt;a href="https://en.wikipedia.org/wiki/Dieter_Rams"&gt;ten principles for good design&lt;/a&gt; [2] enable us to write better code?&lt;/p&gt;
&lt;p&gt;&lt;img src="http://40.media.tumblr.com/9022d63c7546866dc64aaa05b35275ae/tumblr_nhjmijf3EF1qjfk8po1_1280.jpg" width="70%" /&gt;&lt;/p&gt;
&lt;h2&gt;Good code is innovative&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The possibilities for progression are not, by any means, exhausted.
Technological development is always offering new opportunities for original
designs. But imaginative design always develops in tandem with improving
technology, and can never be an end in itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some problems our code is solving are very old (e.g. moving people across a city). How can we use software, and the machine's capabilities, to better solve them? Even when we’re already using computers (e.g. to scan signed paperwork), how can we use them to go one step further (e.g. ask for an electronic signature), delivering a better experience to the end user?&lt;/p&gt;
&lt;p&gt;Even if you have a well established product that is deemed very innovative today, you’re still at the mercy of a new competitor out-innovating you. The tech sector is full of such examples. Companies that stay successful are the ones which don’t fear to constantly disrupt themselves through technological innovation.&lt;/p&gt;
&lt;h2&gt;Good code makes a product useful&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A product is bought to be used. It has to satisfy not only functional, but also
psychological and aesthetic criteria. Good design emphasizes the usefulness of
a product whilst disregarding anything that could detract from it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code is written to be used. As I wrote in &lt;a href="http://www.dein.fr/2013-08-16-we-should-not-ship-code.html"&gt;We should not ship code&lt;/a&gt;, we don’t code for the sake of coding. We code because that’s how a lot of problems can be solved.&lt;/p&gt;
&lt;p&gt;Because code is an intellectual product, its usability needs to be even more an area of focus. Front-end interfaces and back-end API need to provide good affordance, i.e. their capabilities needs to be self-evident for the user.&lt;/p&gt;
&lt;p&gt;Using the pareto principle can be useful here: the codebase should stay focused on the problem at stake, with more than 80% of its LOC being about the business problem. Otherwise, those other functionalities need to be put in libraries, or other services.&lt;/p&gt;
&lt;h2&gt;Good code is aesthetic&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The aesthetic quality of a product is integral to its usefulness because
products are used every day and have an effect on people and their well-being.
Only well-executed objects can be beautiful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that while this obviously applies to the web interface or the mobile app’s interface, it also applies to a back-end API.&lt;/p&gt;
&lt;p&gt;Since code is written to be primarily read by human beings, there’s no reason it can’t take inspiration from literature. Describing how code can be made to be aesthetically pleasing would take a much longer blog post, but here’s some ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistency of code style&lt;/li&gt;
&lt;li&gt;Structure showing clarity of thoughts&lt;/li&gt;
&lt;li&gt;Absence of cruft (&lt;code&gt;TODO&lt;/code&gt;, &lt;code&gt;FIXME&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;li&gt;Orthography and grammar for comments&lt;/li&gt;
&lt;li&gt;Appropriate naming&lt;/li&gt;
&lt;li&gt;Conciseness of code, comments, naming, function&lt;/li&gt;
&lt;li&gt;Reusability of concepts and routines&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Good code makes a product understandable&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It clarifies the product’s structure. Better still, it can make the product
clearly express its function by making use of the user's intuition. At best, it
is self-explanatory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code, more than anything, has a tendency to drift away from the business’ reality. This is one kind of technical debt. When the abstractions that are used in code don’t map the physical world’s reality, they need to be refactored.&lt;/p&gt;
&lt;p&gt;One good way to identify when code is impeding a product’s understandability is to document it. If you find yourself having to give too much context about how code and reality differ, then it means code can be improved.&lt;/p&gt;
&lt;p&gt;Documentation has a tendency to become out of date, so if you need to invest some time, it’s probably safer to invest it in refactoring the code (taking the opportunity of improving the product as well, refactoring for the sake of refactoring rarely brings enough value) to make it more self-documenting.&lt;/p&gt;
&lt;h2&gt;Good code is unobtrusive&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Products fulfilling a purpose are like tools. They are neither decorative
objects nor works of art. Their design should therefore be both neutral and
restrained, to leave room for the user’s self-expression.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code can go too far. Overusing abstraction (here’s an interesting article about how &lt;a href="http://jeremymikkola.com/posts/2015_08_28_warming_up_to_go.html"&gt;Go is an anti-abstraction language&lt;/a&gt;), using fancy data structures, overly complex libraries (for instance, using an ORM where it’s not needed), reinventing the wheel: all of those get in the way of having code that is actually maintainable.&lt;/p&gt;
&lt;p&gt;This is another point I’ve made in &lt;a href="http://www.dein.fr/2015-02-18-maslows-pyramid-of-code-review.html"&gt;Maslow’s pyramid of code review&lt;/a&gt;. Code that is elegant for the sake of being elegant and at the expense of being correct is just getting in the way, and should be refactored or removed.&lt;/p&gt;
&lt;h2&gt;Good code is honest&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It does not make a product more innovative, powerful or valuable than it really
is. It does not attempt to manipulate the consumer with promises that cannot be
kept.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over-engineering a solution is a very powerful temptation. Even when a company is moving really fast, and seems to be very far from over-engineering, it can still invest in the wrong area: invest in the wrong tooling too soon, build something from scratch when there are some better off-the-shelf alternatives, etc.&lt;/p&gt;
&lt;h2&gt;Good code is lasting&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It avoids being fashionable and therefore never appears antiquated. Unlike
fashionable design, it lasts many years – even in today’s throwaway society.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More than in any other domain, software development is plagued with short-lived programming libraries, frameworks, patterns. Pick solutions that are battle-tested, and be conservative in your technical choices.&lt;/p&gt;
&lt;p&gt;Write tests so that functionality can’t be removed and changed without the future maintainer getting explicit feedback about it.&lt;/p&gt;
&lt;h2&gt;Good code is thorough down to the last detail&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nothing must be arbitrary or left to chance. Care and accuracy in the design
process show respect towards the user.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Edge cases needs to be accounted for, without going into over-engineering. While it’s fine to sacrifice certain use cases when building an MVP, it’s not what makes the end product delightful. When code elegantly accounts for all edge cases (for instance, through using patterns such as &lt;a href="https://en.wikipedia.org/wiki/Strategy_pattern"&gt;strategy&lt;/a&gt;), maintenance is easy and edge cases can be fixed as they come, leading to an amazing user experience.&lt;/p&gt;
&lt;p&gt;Also, code is not enough. There’s a lot of context around code that needs to be there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Monitoring (operational and business monitoring)&lt;/li&gt;
&lt;li&gt;Alerting&lt;/li&gt;
&lt;li&gt;Testing (unit, integration, end-to-end, capacity)&lt;/li&gt;
&lt;li&gt;Logging and ability to be introspected and debugged&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Good code is environmentally-friendly&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Design makes an important contribution to the preservation of the environment. &amp;gt; It conserves resources and minimizes physical and visual pollution throughout
the lifecycle of the product.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code consumes electricity, which is finite resource. When code is made more performant, it not only has an impact on the customer, but also on the environment.&lt;/p&gt;
&lt;p&gt;Good code also makes efficient use of data structure and algorithm, and promote reusability. Too often the same piece of functionality is copy pasted between codebases, leading to huge loss in developer efficiency. They should be put in libraries, and open sourced when possible.&lt;/p&gt;
&lt;h2&gt;Good code is as little code as possible&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/d/dc/606-Universal-Shelving-System.jpg" width="70%" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Less, but better – because it concentrates on the essential aspects, and the
products are not burdened with non-essentials.
Back to purity, back to simplicity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is my preferred principle. I already talked about it in &lt;a href="http://www.dein.fr/2013-08-16-we-should-not-ship-code.html"&gt;We should not ship code&lt;/a&gt;, but the basic idea is that software engineering is not primarily about writing code. It’s about solving problems. It just so happens that a lot of problems can be solved through code - but that does not mean that code solves everything.&lt;/p&gt;
&lt;p&gt;How do we write less code?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By finding existing, off-the-shelf solution and avoiding the NIH (not invented here) syndrome.&lt;/li&gt;
&lt;li&gt;By focusing on the problem at stake, escaping the YAGNI (you ain’t gonna need it) syndrome.&lt;/li&gt;
&lt;li&gt;By spending enough time thinking about the problem, without writing code, so as to design the simplest solution possible (but not any simpler).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why having less code is better in the long term is pretty obvious: less maintenance, (usually) more performance, less cognitive load for new developers, etc.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Because code is as much a literary experience as it is a rational undertaking, using principles coming from product design can be useful to think and talk about code.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1]: Harold Abelson, Structure and Interpretation of Computer Programs&lt;/li&gt;
&lt;li&gt;[2]: Wikipedia contributors, "Dieter Rams," Wikipedia, The Free Encyclopedia, https://en.wikipedia.org/w/index.php?title=Dieter_Rams&amp;amp;oldid=682540168 (accessed October 1, 2015).&lt;/li&gt;
&lt;li&gt;[3]: Vitsoe at en.wikipedia [CC BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0)], from Wikimedia Commons&lt;/li&gt;
&lt;/ul&gt;</content><category term="code"></category></entry><entry><title>Maslow's pyramid of code review</title><link href="http://www.dein.fr/2015-02-18-maslows-pyramid-of-code-review.html" rel="alternate"></link><published>2015-02-18T04:15:00+01:00</published><updated>2015-02-18T04:15:00+01:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2015-02-18:/2015-02-18-maslows-pyramid-of-code-review.html</id><summary type="html">&lt;p&gt;Maslow's pyramid can help us think about what great code reviews look like.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="https://36.media.tumblr.com/72e7200921159a4374b7fc163fe0f6f2/tumblr_njwlh7rZui1qgj0nao1_400.png"&gt;&lt;/p&gt;
&lt;p&gt;As in Maslow's pyramid, each layer requires the previous one. It is useless for code that is charging the wrong customer to be readable.&lt;/p&gt;
&lt;p&gt;Code should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Correct&lt;/strong&gt;: does the code do what it's supposed to? Does it handle edge cases? Is it adequately tested to make sure that it stays correct even when other engineers modify it? Is it performant enough for this use case?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt;: does the code have vulnerabilities? Is the data stored safely? Is personal identification information (PII) handled correctly? Could the code be used to induce a DOS? Is input validation comprehensive enough?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Readable&lt;/strong&gt;: is the code easy to read and comprehend? Does it make clear what the business requirements are (code is written to be read by a human, not by a computer)? Are tests concise enough? Are variables, functions and classes named appropriately? Do the domain models cleanly map the real world to reduce cognitive load? Does it use consistent coding convention?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elegant&lt;/strong&gt;: does the code leverage well-known patterns? Does it achieve what it needs to do without sacrificing simplicity and conciseness? Would you be excited to work in this code? Would you be proud of this code?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Altruist&lt;/strong&gt;: does the code leave the codebase better than what it was? Does it inspire other engineers to improve their code as well? Is it cleaning up unused code, improving documentation, introducing better patterns through small-scale refactoring?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Update Feb 18th&lt;/em&gt;: there's some great comments on &lt;a href="https://www.reddit.com/r/programming/comments/2wau2x/maslows_pyramid_of_code_review/"&gt;reddit&lt;/a&gt; about this. I removed the notion of large refactor because I think small refactors have a higher probability of success. I also added a comment about why layering matters.&lt;/p&gt;</content><category term="code"></category></entry><entry><title>Code as Craft</title><link href="http://www.dein.fr/2013-09-19-code-as-craft.html" rel="alternate"></link><published>2013-09-19T17:00:42+02:00</published><updated>2013-09-19T17:00:42+02:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2013-09-19:/2013-09-19-code-as-craft.html</id><summary type="html">&lt;p&gt;Let's take pride in our software engineering craft.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/9bd7756fa039446f15371bb8ff7fb37c/tumblr_inline_mtcwjbBIDb1qfkyvc.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;To win a race, the swiftness of a dart&lt;/span&gt;
&lt;span class="err"&gt;Availeth not without a timely start.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="http://en.wikisource.org/wiki/The_Hare_and_the_Tortoise_(de_La_Fontaine)"&gt;The Hare and the Tortoise&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Etsy's engineering blog "&lt;a href="http://codeascraft.com/about/"&gt;Code as Craft&lt;/a&gt;" can
easily be considered one of the best ones in the industry.&lt;/p&gt;
&lt;p&gt;In their definition of "craftsmanship", they make this long quote from &lt;a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X"&gt;The Pragmatic
Programmer&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;construction&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;engineering&lt;/span&gt; &lt;span class="n"&gt;discipline&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;However&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;preclude&lt;/span&gt; &lt;span class="n"&gt;individual&lt;/span&gt; &lt;span class="n"&gt;craftsmanship&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Think&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt;
&lt;span class="n"&gt;cathedrals&lt;/span&gt; &lt;span class="n"&gt;built&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Europe&lt;/span&gt; &lt;span class="n"&gt;during&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Middle&lt;/span&gt; &lt;span class="n"&gt;Ages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Each&lt;/span&gt; &lt;span class="n"&gt;took&lt;/span&gt; &lt;span class="n"&gt;thousands&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;effort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spread&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="n"&gt;decades&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Lessons&lt;/span&gt; &lt;span class="n"&gt;learned&lt;/span&gt; &lt;span class="n"&gt;were&lt;/span&gt;
&lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;builders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;advanced&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;span class="n"&gt;structural&lt;/span&gt; &lt;span class="n"&gt;engineering&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;accomplishments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;But&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;carpenters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;stonecutters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carvers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;glass&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt; &lt;span class="n"&gt;were&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;craftspeople&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;interpreting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;engineering&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;whole&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;
&lt;span class="n"&gt;transcended&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;purely&lt;/span&gt; &lt;span class="n"&gt;mechanical&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;construction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt;
&lt;span class="n"&gt;belief&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;individual&lt;/span&gt; &lt;span class="n"&gt;contributions&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;sustained&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt;
&lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;cut&lt;/span&gt; &lt;span class="n"&gt;mere&lt;/span&gt; &lt;span class="n"&gt;stones&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;envisioning&lt;/span&gt; &lt;span class="n"&gt;cathedrals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Quarry&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;creed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two parts about craftsmanship: one that is intrinsic, and one that is
extrinsic.&lt;/p&gt;
&lt;p&gt;The extrinsic part is perhaps the most obvious one: craftspeople &lt;strong&gt;think
holistically&lt;/strong&gt; about what they're building. In some sense, what they aim to
accomplish is much bigger than their work. A great woodworker experiences
empathy about her customer and aspires to build something that will delight the
end-user. They not only support a use case, but go much further and let the
produced artifact transcends it. Well-crafted code not only fixes
a problem, it fixes it elegantly. It does not show any rough patch and
feels a natural solution. The consequence of that is when a problem is not
well-defined, or when the timeline set to fix it is not feasible, engineers
should push back - or at least openly share their concerns, just like a good woodworker would
do. Nobody would ever ask a woodworker to take shortcuts when he's building
the house's framework.&lt;/p&gt;
&lt;p&gt;The intrinsic part is about &lt;strong&gt;taking pride in one's work and reflecting about
it&lt;/strong&gt;.  It's about sharpening one's tools and adding new ones. A great
woodworker would talk for hours about his tools. It's highly probable that his
workshop will be tidy, following the 5S methodology (more about that below).
There's no reason software engineers should feel differently. On the contrary,
they should always be learning, and a great way to learn is to strive for code
quality. When you optimize for speed, you usually don't take time to learn
about your tools and end up misusing them. In the long term, this strategy will
ultimately backfire.&lt;/p&gt;
&lt;p&gt;Engineers who take the time to learn about tools, who take time to write
testable &amp;amp; quality code, who take time to carefully think about the
architecture of a service or of an implementation (e.g. following design
patterns) will perhaps be a bit slower in the short term, but this will pay out
ten times in the long term (in quality but also in speed). Striving for quality
in every project, in every task, even mundane (e.g. by automating a test that
could totally be done manually) will enable you to reach the same amount of
quality much faster. Always caring about quality enables continuous
improvement: it might take one hour to learn about how to properly use
a complex but powerful feature of a Python library, but the next time you'll
have 1- probably a much more reliable and fast solution 2- trained your brain
to be constantly learning.  Our industry is moving so fast that this is in my
opinion the only durable strategy.&lt;/p&gt;
&lt;p&gt;Craftsmanship is ultimately about the worker as a person. Craftspeople are
those who learn and have fun doing it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/e9919eb6a23489be91c11635608d3763/tumblr_inline_mtcwn0g54e1qfkyvc.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here are the &lt;a href="http://en.wikipedia.org/wiki/5S_(methodology)"&gt;5S&lt;/a&gt; (seiri,
seiton, seiso, seiketsu, and shitsuke) applied to software engineering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sorting: remove code that is never run.&lt;/li&gt;
&lt;li&gt;Set in order: streamline deployment and management through scripts and
  automation.&lt;/li&gt;
&lt;li&gt;Systematic cleaning: remove all TODOs, FIXMEs and temporary code.&lt;/li&gt;
&lt;li&gt;Standardising: remove hacks by improving patterns, abstractions and
  architecture.&lt;/li&gt;
&lt;li&gt;Sustaining: use continuous integration tools to prevent backsliding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(there's a similar take about 5S applied to software development in &lt;a href="http://blogs.versionone.com/agile_management/2013/07/25/5s-applied-to-agile-software-development/"&gt;this
article&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Pictures from RaidersLight (CC BY-NC-SA) and Alan Cleaver (CC BY)&lt;/p&gt;</content><category term="code"></category></entry><entry><title>Resources to learn coding</title><link href="http://www.dein.fr/2013-09-09-resources-to-learn-coding.html" rel="alternate"></link><published>2013-09-09T17:53:52+02:00</published><updated>2013-09-09T17:53:52+02:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2013-09-09:/2013-09-09-resources-to-learn-coding.html</id><summary type="html">&lt;p&gt;A list of resources to learn programming.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm often asked about resources to learn programming. Here are a few of them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/charlax/professional-programming"&gt;charlax/professional-programming&lt;/a&gt;: a collection of full-stack resources for programmers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt; (the best IMO)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/"&gt;Udacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.khanacademy.org/"&gt;Khan Academy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnpythonthehardway.org/"&gt;Learn Python the Hard Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codecademy.com/"&gt;CodeAcademy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.apple.com/education/itunes-u/"&gt;iTunesU&lt;/a&gt; has some good courses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are numerous of them, and this does not even count the books. There are also numerous articles about the best resources to learn coding, and the best method of learning.&lt;/p&gt;
&lt;p&gt;Here's my only advice: &lt;strong&gt;nothing beats learning by doing&lt;/strong&gt;. Try to build something meaningful and exciting to apply what you learn.&lt;/p&gt;</content><category term="code"></category></entry><entry><title>We should not ship code</title><link href="http://www.dein.fr/2013-08-16-we-should-not-ship-code.html" rel="alternate"></link><published>2013-08-16T20:02:00+02:00</published><updated>2013-08-16T20:02:00+02:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2013-08-16:/2013-08-16-we-should-not-ship-code.html</id><summary type="html">&lt;p&gt;An engineer's job is not to write code - it is to solve business problems.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It easy to be mistaken into thinking that a software developer's job is to ship code.&lt;/p&gt;
&lt;p&gt;It is not.&lt;/p&gt;
&lt;p&gt;Our job is to solve intellectual problems.&lt;/p&gt;
&lt;p&gt;It so happens that out of all the tools humans created, computers are best at solving those, because software is great at dealing with abstractions. However, we will never get recognition from the business if we just ship code. We get recognition if we solve problems and if we do it fast.&lt;/p&gt;
&lt;p&gt;That is why the best companies focus on problem-solving in their interviews, and not on fundamental knowledge. A quick learner can learn whatever she wants to solve things. We are in the learning business. We are always learning new programming languages, databases, libraries, services, patterns... to be faster at solving problems. We also need to learn about the problems itself, and that is why waterfall is rarely a good thing: how can developers fix business problems if they cannot build their understanding of it?&lt;/p&gt;
&lt;p&gt;Yesterday, during our show &amp;amp; tell session one developer demonstrated a remarkable tool that would fix one of our long-standing problems. This tool requires minimal integration. A problem was solved without code.&lt;/p&gt;
&lt;p&gt;We are in the business of solving intellectual problems. The business is never going to measure our ROI with the number of lines of code we write. The only thing it is concerned with is whether or not the problem was solved efficiently.&lt;/p&gt;
&lt;p&gt;It does not mean that everything has to be simple, nor this is a good excuse for fast and loose solutions (ultimately those will make the code less maintainable, and it will be very costly to solve new problems, as requirements tend to grow over time). We should take pride in elegantly solving complex problems. Some complex problems might require a complex solution. That is fine. Just like woodworkers prides themselves in their mastery of their tools, we should be proud of how much we master our tools. However, our skills are not the end goal. The solution is.&lt;/p&gt;</content><category term="code"></category></entry><entry><title>Using qcachegrind to visualize Python profiling data</title><link href="http://www.dein.fr/2013-05-22-using-qcachegrind-to-visualize-python-profiling.html" rel="alternate"></link><published>2013-05-22T00:46:00+02:00</published><updated>2013-05-22T00:46:00+02:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2013-05-22:/2013-05-22-using-qcachegrind-to-visualize-python-profiling.html</id><summary type="html">&lt;p&gt;How to visualize your code's profile with qcachegrind.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;graphviz&lt;/code&gt; is required for the call graph.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ brew install qcachegrind graphviz
$ pip install pyprof2calltree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Profiling&lt;/h2&gt;
&lt;p&gt;Profile your code with &lt;code&gt;cProfile&lt;/code&gt; or &lt;code&gt;Profile&lt;/code&gt;. &lt;code&gt;pyprof2calltree&lt;/code&gt; won't work with &lt;code&gt;hotshot&lt;/code&gt;. Store the profile data in a &lt;code&gt;.pstats&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python -m cProfile -o profile.pstats yourscript.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pyprof2calltree -i profile.pstats -o profile.kgrind
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then open this &lt;code&gt;kgrind&lt;/code&gt; file with &lt;code&gt;qcachegrind&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ qcachegrind profile.kgrind
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/8faf28c1b1d9227330b4f185c48982cd/tumblr_inline_mspsujDXvH1qz4rgp.png"&gt;&lt;/p&gt;</content><category term="code"></category></entry><entry><title>Why I keep on using Vim instead of going back to TextMate</title><link href="http://www.dein.fr/why-I-keep-on-using-vim.html" rel="alternate"></link><published>2011-12-14T10:53:00+01:00</published><updated>2011-12-14T10:53:00+01:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2011-12-14:/why-I-keep-on-using-vim.html</id><summary type="html">&lt;p&gt;Why taking the time to learn Vim is a smart investment.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Disclaimer: this article only conveys my personal point of view. Please excuse my English!&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I tried numerous text editors: Komodo, Emacs, Nano, Textwrangler, gedit, SPE, &lt;a href="http://www.sublimetext.com/"&gt;Sublime&lt;/a&gt;, Coda, &lt;a href="http://www.vicoapp.com/"&gt;Vico&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;When I discovered TextMate, I really loved it because it was both flexible and
Mac-friendly. Even today, I think that it's a great tool that can greatly
improve productivity.&lt;/p&gt;
&lt;p&gt;Yesterday, MacroMates &lt;a href="http://blog.macromates.com/2011/textmate-2-0-alpha/"&gt;released&lt;/a&gt; the first public
Textmate 2.0 alpha version. Its authors acknowledged the long wait that preceded
this release by stating that it would "provide some relief to those who have been questioning TextMate’s future".&lt;/p&gt;
&lt;p&gt;I began using Vim two weeks ago, and right now I don't see any reason
why I would get back to TextMate. I'll try to explain in details how I got
to use Vim and what are its (numerous) advantages.&lt;/p&gt;
&lt;h2&gt;Vim: &lt;a href="http://en.wikipedia.org/wiki/Je_t'aime..._moi_non_plus"&gt;Je t'aime moi non plus&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Maybe some other hackers will recognize themselves in this
behavior: even though I've been using Vim for a long time, &lt;strong&gt;I never
took the time to really learn it&lt;/strong&gt;. I used to think that Vim was too old to be
interesting: the modal behavior looked really old-fashioned and
counter-intuitive, to say the least.&lt;/p&gt;
&lt;p&gt;What's paradoxical is that I kept on using Vim, primarily because it's on all
computers and it's really efficient when modifying system files. Even when
I tried Emacs, I kept on using Vim because it felt so much faster!&lt;/p&gt;
&lt;p&gt;With the benefit of hindsight, it was really strange because for all the other
tools I was always trying to improve my productivity (learning keyboard
shortcuts, tuning configuration files, looking for ways to avoid repetition)
but I never took the time to really learn Vim: for instance, two weeks ago
I learned that entering &lt;code&gt;a&lt;/code&gt; in normal mode would go into insert mode &lt;em&gt;after&lt;/em&gt;
the cursor…&lt;/p&gt;
&lt;p&gt;Why did I suddenly became aware of this paradox?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I read numerous articles about Vim on Hacker News (I guess it's &lt;strong&gt;useful
  procrastination&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;TextMate was missing key features like split windows.&lt;/li&gt;
&lt;li&gt;I felt that Vim offered so much flexibility and modularity that it
  would be great to test it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Vim's numerous advantages&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Vim is free and open source.&lt;/strong&gt; Well-known open source projects are
superior in the long term because they are not dependent on a company's
objectives.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vim is superior for text manipulation.&lt;/strong&gt; Most of our
work in an editor consists in text manipulation. Contrary to Emacs'
painful shortcuts (from my point of view), Vim's modal mode provides an
&lt;em&gt;elegant&lt;/em&gt; and efficient interface. What is more, most of the shortcuts are
easily memorable. TextMate does not provide such a great combination of
ease of use and effectiveness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vim is empowering.&lt;/strong&gt; As Bram Moolenaar (Vim's main author) &lt;a href="http://www.moolenaar.net/habits.html"&gt;puts
it&lt;/a&gt;, "if you spend a lot of time
typing plain text, writing programs or HTML, you can save much of that
time by using a good editor and using it effectively." Vim is great
because it really puts you in charge. The learning curve is quite steep
but it's what's exciting!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vim has a vibrant community.&lt;/strong&gt; I agree that it's also the case for
Emacs and Textmate. For those who still thinks Vim is old, have a look
at all those repositories on Github!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vim's scripting language is straightfoward.&lt;/strong&gt; Again, this is really
personal, but I find Lisp not very well adapted to scripting. I really
like Vim's streamlined scripting and configuration files. And you can
also use Python or Ruby.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vim's vision is compelling.&lt;/strong&gt; As Jeff Bezos says, "maintain a firm grasp of
the obvious at all times." To me it is common sense that a text editor should
focus on efficiency and text manipulation, as Brian Moolenaar puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It has always been the spirit of Unix to have separate programs that
do their job well, and work together to perform a bigger task.
Unfortunately, most editors don't work too well together with other
programs - you can't replace the e-mail editor in Netscape with
another one, for example. You end up using a crippled editor. Another
tendency is to include all kinds of functionality inside the editor;
Emacs is a good example of where this can end up. (Some call it an
operating system that can also be used to edit text.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vim follows the Unix philosophy, which makes it extremely easy to use it
with other programs. It is not the case for Textmate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An editor's configuration files should be put under version control.&lt;/strong&gt;
A text editor is arguably the single most important tool for
a developer. This is why it should be possible to constantly improve one's
productivity. TextMate configuration files are not as easy to tweak.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vim is everywhere.&lt;/strong&gt; Vim is great for sysadmin because it's present on
most computers.&lt;/p&gt;
&lt;h1&gt;Stuff I don't like in Vim&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;We are in 2012, the user should not have to download syntax files and
  activate them. It should be the default.&lt;/li&gt;
&lt;li&gt;It should use Perl's regex syntax by default.&lt;/li&gt;
&lt;li&gt;Help files are quite difficult to read at first sight. They could be
  improved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More generally, defaults could be improved. For instance, plugins management
could be more automated, instead of having to install Pathogen and using &lt;code&gt;git
submodules&lt;/code&gt;. This could happen outside Vim, with a kind of universal repository
for plugins and a text file that would list all the plugins (like
&lt;code&gt;.gitmodules&lt;/code&gt;). Plugin would be automatically updated regularly.&lt;/p&gt;
&lt;p&gt;Here is another idea to have great defaults: why analyzing all the &lt;code&gt;vimrc&lt;/code&gt; that
have been posted on the web? This methodology has its flaws, but we would get
a sense of what are the best defaults.&lt;/p&gt;
&lt;h1&gt;How to try Vim&lt;/h1&gt;
&lt;p&gt;If you want to try Vim, just follow these two steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do &lt;strong&gt;not&lt;/strong&gt; use any plugin or anyone else's vimrc. &lt;a href="http://mislav.uniqpath.com/2011/12/vim-revisited/"&gt;Really&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;vimtutor&lt;/code&gt; to learn the basics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Other articles&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/charlax/dotvim"&gt;Checkout my vim configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.moolenaar.net/habits.html"&gt;Seven habits of effective text editing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yehudakatz.com/2010/07/29/everyone-who-tried-to-convince-me-to-use-vim-was-wrong/"&gt;Everyone Who Tried to Convince Me to use Vim was Wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mislav.uniqpath.com/2011/12/vim-revisited/"&gt;Vim: revisited&lt;/a&gt;:
  a must-read.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/"&gt;Vimcasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://media.tumblr.com/tumblr_lw7fsqf9ge1qfkyvc.png"&gt;&lt;/p&gt;</content><category term="code"></category></entry><entry><title>Articles from Joel Spolsky about functional specifications</title><link href="http://www.dein.fr/articles-from-joel-spolsky-about-functional-specifications.html" rel="alternate"></link><published>2011-11-09T09:55:00+01:00</published><updated>2011-11-09T09:55:00+01:00</updated><author><name>charlax</name></author><id>tag:www.dein.fr,2011-11-09:/articles-from-joel-spolsky-about-functional-specifications.html</id><summary type="html">&lt;p&gt;Some quotable quotes about functional specs.&lt;/p&gt;</summary><content type="html">&lt;p&gt;These articles were written in 2000, but are still relevant today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/fog0000000036.html"&gt;Painless Functional Specifications - Part 1: Why Bother?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/fog0000000035.html"&gt;Painless Functional Specifications - Part 2: What's a Spec?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/fog0000000034.html"&gt;Painless Functional Specifications - Part 3: But... How?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.joelonsoftware.com/articles/fog0000000033.html"&gt;Painless Functional Specifications - Part 4: Tips&lt;/a&gt; (if you have time for only one article, read this one)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key excerpts:&lt;/p&gt;
&lt;h2&gt;Part 1&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;So that's giant reason number one to write a spec. Giant reason number two is
to save time communicating. When you write a spec, you only have to
communicate how the program is supposed to work once. Everybody on the team
can just read the spec. The QA people read it so that they know how the
program is supposed to work and they know what to test for. The marketing
people use it to write their vague vaporware white papers to throw up on the
web site about products that haven't been created yet. The business
development people misread it to spin weird fantasies about how the product
will cure baldness and warts and stuff, but it gets investors, so that's OK.
The developers read it so that they know what code to write. The customers
read it to make sure the developers are building a product that they would
want to pay for. The technical writers read it and write a nice manual (that
gets lost or thrown away, but that's a different story). The managers read it
so that they can look like they know what's going on in management meetings.
And so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Part 2&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When you're building a product with a team, everybody tends to have their
favorite, real or imagined pet features that they just can't live without. If
you do them all, it will take infinite time and cost too much money. You have
to start culling features right away, and the best way to do this is with a
"nongoals" section of the spec. Things we are just not going to do. A nongoal
might be a feature you won't have ("no telepathic user interface!") or it
might be something more general ("We don't care about performance in this
release. The product can be slow, as long as it works. If we have time in
version 2, we'll optimize the slow bits.") These nongoals are likely to cause
some debate, but it's important to get it out in the open as soon as possible.
"Not gonna do it!" as George Sr. puts it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Part 3&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Program managers are invaluable. If you've ever complained about how
programmers are more concerned with technical elegance than with
marketability, you need a program manager. If you've ever complained
about how people who can write good code never do a good job of writing
good English, you need a program manager. If you've ever complained about
how your product seems to drift without any clear direction, you need a
program manager.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Part 4&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;So. Specs are good, but not if nobody reads them. As a spec-writer, you
have to trick people into reading your stuff, and you should also probably
make an effort not to cause any already-too-small brains to leak out
through eye-sockets.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="code"></category></entry></feed>